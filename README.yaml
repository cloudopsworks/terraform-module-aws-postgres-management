name: Terraform Module for AWS RDS PostgreSQL database and User Management
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-postgres-management

description: |-
  This module manages AWS RDS for PostgreSQL databases and automates user management with 
  comprehensive security features. It provides automated user creation, password rotation, 
  and role management capabilities integrated with AWS Secrets Manager. The module handles 
  database instance provisioning, automated backups, maintenance windows, parameter groups, 
  and security group management, supporting multi-AZ deployments, encryption at rest, and 
  automated minor version upgrades.

# Introduction to the project
introduction: |-
  ### Introduction
  
  The **Terraform Module for AWS RDS PostgreSQL database and User Management** is designed 
  to streamline the process of provisioning and maintaining PostgreSQL instances on Amazon RDS. 
  It offers a variety of configuration parameters for fine-tuning resources to meet different 
  environment needs, including production, development, and staging.

  #### Key Features
  - Automated PostgreSQL database provisioning
  - User and permission management
  - Configurable backup retention periods
  - Multi-AZ deployment support
  - Encryption at rest using AWS KMS
  - Custom parameter groups
  - Automated minor version upgrades
  - Enhanced monitoring capabilities
  - Performance insights integration
  - Security group management

# How to use this project
usage: |-
  ### How to Use this Project
  
  #### Prerequisites
  - Terraform >= 1.0
  - Terragrunt >= 0.36
  - AWS Provider >= 4.0

  #### Configuration Steps
  1. **Add this module as a source** in your Terraform or Terragrunt configuration:
     ```hcl
     source = "git::https://github.com/cloudopsworks/terraform-module-aws-postgres-management.git?ref=v1.0.0"
     ```

  2. **Configure required variables** in your `terraform.tfvars` or Terragrunt inputs:
     ```yaml
     # Database Configuration
     database_name: "myapp"
     engine_version: "14.5"
     instance_class: "db.t3.medium"

     # Networking
     vpc_id: "vpc-12345678"
     subnet_ids: ["subnet-a1b2c3d4", "subnet-e5f6g7h8"]

     # Security
     backup_retention_period: 7
     multi_az: true
     storage_encrypted: true

     # User Management
     users:
       app_user:
         name: "application"
         login: true
         create_database: false
         connection_limit: 100
       admin_user:
         name: "dbadmin"
         login: true
         superuser: true

     # Password Rotation
     password_rotation_period: 90
     rotation_lambda_name: "db-password-rotation"
     ```

  3. **Initialize and apply** the configuration:
     ```bash
     terragrunt init
     terragrunt plan
     terragrunt apply
     ```

  #### Available Variables
  Refer to variables-pgsql.tf for detailed documentation of all available options.

# Example usage
examples: |-
  ### Example Usage
  
  #### Basic Configuration (terragrunt.hcl)
  ```hcl
  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-postgres-management.git?ref=v1.0.0"
  }

  inputs = {
    identifier = "myapp-postgres"
    engine_version = "14.5"
    instance_class = "db.t3.medium"
    allocated_storage = 20

    database_name = "myapp"
    master_username = "dbadmin"

    vpc_id = dependency.vpc.outputs.vpc_id
    subnet_ids = dependency.vpc.outputs.private_subnets

    backup_retention_period = 7
    multi_az = true
    storage_encrypted = true

    users = {
      app = {
        name = "application"
        login = true
        connection_limit = 100
      }
      admin = {
        name = "dbadmin"
        login = true
        superuser = true
      }
    }

    password_rotation_period = 90
    rotation_lambda_name = "db-password-rotation"

    extra_tags = {
      Environment = "production"
      Project     = "myapp"
    }
  }
  ```

  #### Production Configuration (production/inputs.yaml)
  ```yaml
  # Database Settings
  instance_class: "db.r6g.xlarge"
  allocated_storage: 100
  max_allocated_storage: 500

  # High Availability
  multi_az: true
  backup_retention_period: 30

  # Performance
  performance_insights_enabled: true
  monitoring_interval: 60

  # Security
  storage_encrypted: true
  deletion_protection: true

  # User Management
  users:
    app_user:
      name: "application"
      login: true
      create_database: false
      connection_limit: 100
      grant: "owner"
    readonly_user:
      name: "readonly"
      login: true
      inherit: true
      connection_limit: 50
    admin_user:
      name: "dbadmin"
      login: true
      superuser: true
      create_database: true

  # Password Management
  password_rotation_period: 90
  rotation_lambda_name: "db-password-rotation"
  force_reset: false
  ```
  
  You can place this `terragrunt.hcl` file in a directory that also contains the relevant 
  YAML files (e.g., `inputs.yaml`) and any other shared configuration.
  
  Refer to your own file structure layout for environment-specific overrides, naming conventions, 
  and relationships with other modules.

# How to get started quickly
quickstart: |-
  # Quickstart
  
  ### Prerequisites
  - AWS CLI configured with appropriate credentials
  - Terraform >= 1.0.0
  - Terragrunt >= 0.36.0

  ### Step-by-Step Guide
  1. **Create Project Structure**:
     ```bash
     mkdir -p myproject/postgres
     cd myproject/postgres
     ```

  2. **Create Terragrunt Configuration**:
     Create `terragrunt.hcl`:
     ```hcl
     terraform {
       source = "git::https://github.com/cloudopsworks/terraform-module-aws-postgres-management.git?ref=v1.0.0"
     }

     inputs = {
       identifier = "myapp-postgres"
       engine_version = "14.5"
       instance_class = "db.t3.medium"
       database_name = "myapp"
       vpc_id = "vpc-12345678"
       subnet_ids = ["subnet-a1b2c3d4", "subnet-e5f6g7h8"]

       users = {
         app = {
           name = "application"
           login = true
           connection_limit = 100
         }
         admin = {
           name = "dbadmin"
           login = true
           superuser = true
         }
       }

       password_rotation_period = 90
       rotation_lambda_name = "db-password-rotation"
     }
     ```

  3. **Initialize and Deploy**:
     ```bash
     terragrunt init
     terragrunt plan
     terragrunt apply
     ```

  4. **Verify Deployment**:
     ```bash
     terragrunt output
     aws rds describe-db-instances --db-instance-identifier myapp-postgres
     ```

  5. **Retrieve User Credentials**:
     ```bash
     # For non-rotated passwords
     terragrunt output -json user_passwords

     # For rotated passwords
     aws secretsmanager get-secret-value --secret-id myapp-postgres-application
     ```

  6. **Connect to Database**:
     ```bash
     psql -h $(terragrunt output -raw endpoint) -U application -d myapp
     ```

  By following these steps, you will have a running Amazon RDS for PostgreSQL instance with 
  configured users and automated password rotation.

  ### Next Steps
  - Configure additional security groups
  - Set up monitoring and alerting
  - Implement backup strategies
  - Configure read replicas if needed
  - Set up additional database users and roles
  - Configure password rotation policies

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"